worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
rtmp_auto_push on;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# RTMP Configuration
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        max_streams 1000;
        
        application live {
            live on;
            
            # Authentication callbacks
            on_publish http://backend:3000/api/v1/streaming/auth/publish;
            on_play http://backend:3000/api/v1/streaming/auth/play;
            
            # Stream event notifications
            on_publish_done http://backend:3000/api/v1/streaming/events/publish_done;
            on_play_done http://backend:3000/api/v1/streaming/events/play_done;
            on_record_done http://backend:3000/api/v1/streaming/events/record_done;
            
            # Connection events
            on_connect http://backend:3000/api/v1/streaming/events/connect;
            on_disconnect http://backend:3000/api/v1/streaming/events/disconnect;
            
            # HLS configuration
            hls on;
            hls_path /var/hls;
            hls_fragment 6;
            hls_playlist_length 30;
            hls_continuous on;
            hls_cleanup on;
            hls_nested on;
            hls_fragment_naming system;
            
            # Multiple HLS variants for adaptive bitrate
            hls_variant _low BANDWIDTH=400000 RESOLUTION=640x360;
            hls_variant _mid BANDWIDTH=800000 RESOLUTION=1280x720;
            hls_variant _high BANDWIDTH=1500000 RESOLUTION=1920x1080;
            
            # DASH configuration
            dash on;
            dash_path /var/dash;
            dash_fragment 6;
            dash_playlist_length 30;
            dash_cleanup on;
            dash_nested on;
            
            # Recording configuration
            record all;
            record_path /var/recordings;
            record_unique on;
            record_suffix .mp4;
            record_append on;
            record_max_size 1000M;
            record_max_frames 2;
            record_interval 1h;
            
            # Stream quality control
            drop_idle_publisher 10s;
            sync 10ms;
            
            # Allow publishing and playing
            allow publish all;
            allow play all;
            
            # Transcoding for multiple bitrates
            exec_push ffmpeg -i rtmp://localhost:1935/live/$name 
                -c:v libx264 -preset veryfast -tune zerolatency -c:a aac 
                -b:v 400k -b:a 64k -s 640x360 -f flv rtmp://localhost:1935/live/$name_low
                -c:v libx264 -preset veryfast -tune zerolatency -c:a aac 
                -b:v 800k -b:a 128k -s 1280x720 -f flv rtmp://localhost:1935/live/$name_mid
                -c:v libx264 -preset veryfast -tune zerolatency -c:a aac 
                -b:v 1500k -b:a 192k -s 1920x1080 -f flv rtmp://localhost:1935/live/$name_high;
        }
        
        # Playback application for recorded content
        application playback {
            live off;
            play /var/recordings;
            
            # Authentication for playback
            on_play http://backend:3000/api/v1/streaming/auth/playback;
        }
        
        # Recording-only application
        application record {
            live on;
            record all;
            record_path /var/recordings;
            record_unique on;
            record_suffix .mp4;
            record_max_size 1000M;
            
            # Disable streaming outputs for recording-only
            hls off;
            dash off;
            
            # Authentication
            on_publish http://backend:3000/api/v1/streaming/auth/record;
        }
    }
}

# HTTP Configuration
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=hls:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=dash:10m rate=30r/s;
    
    # Upstream backend servers
    upstream backend {
        server backend:3000;
        keepalive 32;
    }
    
    # Main HTTP server
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # CORS headers for streaming
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
        add_header Access-Control-Expose-Headers 'Content-Length,Content-Range';
        
        # Handle preflight requests
        location ~ ^/(?:hls|dash)/ {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
                add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # HLS streaming endpoint
        location /hls {
            limit_req zone=hls burst=10 nodelay;
            
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            
            root /var;
            
            # Cache control for different file types
            location ~ \.m3u8$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires "0";
                expires -1;
            }
            
            location ~ \.ts$ {
                add_header Cache-Control "public, max-age=3600";
                expires 1h;
            }
            
            # Authentication for protected streams
            auth_request /auth/stream;
            auth_request_set $user $upstream_http_x_user;
            auth_request_set $camera_id $upstream_http_x_camera_id;
        }
        
        # DASH streaming endpoint
        location /dash {
            limit_req zone=dash burst=10 nodelay;
            
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            
            root /var;
            
            # Cache control
            location ~ \.mpd$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                expires -1;
            }
            
            location ~ \.m4s$ {
                add_header Cache-Control "public, max-age=3600";
                expires 1h;
            }
            
            # Authentication for protected streams
            auth_request /auth/stream;
        }
        
        # Authentication endpoint for streams
        location = /auth/stream {
            internal;
            proxy_pass http://backend/api/v1/streaming/auth/stream;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # RTMP statistics
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            
            # Basic authentication for statistics
            auth_basic "RTMP Statistics";
            auth_basic_user_file /etc/nginx/.htpasswd;
        }
        
        location /stat.xsl {
            root /var/www/html;
        }
        
        # RTMP control interface
        location /control {
            rtmp_control all;
            
            # Basic authentication for control
            auth_basic "RTMP Control";
            auth_basic_user_file /etc/nginx/.htpasswd;
        }
        
        # Recordings download endpoint
        location /recordings {
            alias /var/recordings;
            
            # Authentication required
            auth_request /auth/recording;
            
            # Security headers for downloads
            add_header Content-Disposition "attachment";
            add_header X-Content-Type-Options nosniff;
            
            # Enable range requests for video seeking
            location ~ \.(mp4|flv|mov|avi)$ {
                mp4;
                mp4_buffer_size 1m;
                mp4_max_buffer_size 5m;
            }
        }
        
        # Authentication endpoint for recordings
        location = /auth/recording {
            internal;
            proxy_pass http://backend/api/v1/recording/auth;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Thumbnails endpoint
        location /thumbnails {
            alias /var/thumbnails;
            expires 1d;
            add_header Cache-Control "public, immutable";
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            
            # Allow only local and private networks
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # Proxy API requests to backend
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /var/www/html;
        }
    }
}