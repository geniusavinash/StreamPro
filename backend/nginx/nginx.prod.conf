worker_processes auto;
rtmp_auto_push on;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# RTMP Configuration
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow publish all;
        allow play all;
        
        # Increase timeout for better stability
        timeout 60s;
        ping 30s;
        ping_timeout 30s;

        application live {
            live on;
            
            # Enable HLS with optimized settings
            hls on;
            hls_path /var/hls;
            hls_fragment 2;
            hls_playlist_length 10;
            hls_continuous on;
            hls_cleanup on;
            hls_nested on;
            hls_variant _low BANDWIDTH=500000;
            hls_variant _mid BANDWIDTH=1500000;
            hls_variant _high BANDWIDTH=3000000;
            
            # Enable DASH
            dash on;
            dash_path /var/dash;
            dash_fragment 2;
            dash_playlist_length 10;
            dash_cleanup on;
            dash_nested on;
            
            # Enable recording with rotation
            record all;
            record_path /var/recordings;
            record_unique on;
            record_suffix .mp4;
            record_append on;
            record_max_size 1000M;
            record_max_frames 2;
            
            # Authentication callbacks
            on_publish http://backend:3000/api/v1/streaming/auth;
            on_publish_done http://backend:3000/api/v1/streaming/publish-end;
            on_play http://backend:3000/api/v1/streaming/auth;
            
            # Stream status callbacks
            on_connect http://backend:3000/api/v1/streaming/auth;
            on_disconnect http://backend:3000/api/v1/streaming/disconnect;
            
            # Notify on record done
            on_record_done http://backend:3000/api/v1/streaming/record-done;
            
            # Drop idle publisher
            drop_idle_publisher 10s;
            
            # Sync streams
            sync 10ms;
        }
    }
}

# HTTP Configuration for HLS and DASH
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=hls:10m rate=30r/s;
    
    # Upstream backend servers
    upstream backend {
        server backend:3000;
        keepalive 32;
    }

    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # CORS headers for HLS/DASH
        location ~* \.(m3u8|ts|mp4|mpd)$ {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        # HLS streams
        location /hls {
            limit_req zone=hls burst=50 nodelay;
            
            root /var;
            
            # Cache control for different file types
            location ~ \.m3u8$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
            
            location ~ \.ts$ {
                expires 1m;
                add_header Cache-Control "public, max-age=60";
            }
        }
        
        # DASH streams
        location /dash {
            limit_req zone=hls burst=50 nodelay;
            
            root /var;
            
            location ~ \.mpd$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
            
            location ~ \.mp4$ {
                expires 1m;
                add_header Cache-Control "public, max-age=60";
            }
        }
        
        # API proxy
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # WebSocket support for real-time features
        location /socket.io/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Statistics endpoint
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            
            # Restrict access to stats
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        location /stat.xsl {
            root /etc/nginx/html;
        }
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
            
            # Restrict access
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # Frontend static files (if serving frontend from same server)
        location / {
            root /var/www/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
    }
    
    # HTTPS server (uncomment and configure for production)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /path/to/certificate.crt;
    #     ssl_certificate_key /path/to/private.key;
    #     
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Include the same location blocks as HTTP server
    # }
}