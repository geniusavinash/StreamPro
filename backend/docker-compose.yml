version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: camera_streaming_db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: camera_streaming
      MYSQL_USER: camera_user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - camera_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: camera_streaming_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - camera_network

  # Nginx RTMP Server
  nginx-rtmp:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: camera_streaming_nginx
    ports:
      - "1935:1935"  # RTMP port
      - "8080:80"    # HTTP port for HLS
    volumes:
      - rtmp_recordings:/var/recordings
      - hls_data:/var/hls
      - dash_data:/var/dash
      - thumbnails_data:/var/thumbnails
    environment:
      - TZ=UTC
    networks:
      - camera_network
    depends_on:
      - mysql
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Application (will be added later)
  # backend:
  #   build: .
  #   container_name: camera_streaming_backend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=development
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   networks:
  #     - camera_network
  #   depends_on:
  #     - mysql
  #     - redis
  #     - nginx-rtmp

volumes:
  mysql_data:
  redis_data:
  rtmp_recordings:
  hls_data:
  dash_data:
  thumbnails_data:

networks:
  camera_network:
    driver: bridge