worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# RTMP Configuration
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        
        # Application for live streaming
        application live {
            live on;
            
            # Allow publishing from any IP (configure security as needed)
            allow publish all;
            
            # Allow playing from any IP
            allow play all;
            
            # HLS configuration
            hls on;
            hls_path /var/www/html/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            
            # DASH configuration
            dash on;
            dash_path /var/www/html/dash;
            dash_fragment 3;
            dash_playlist_length 60;
            
            # Recording configuration
            record all;
            record_path /var/www/html/recordings;
            record_unique on;
            record_suffix .flv;
            record_append on;
            
            # Notify URL for stream events
            on_publish http://localhost:3000/api/v1/streaming/on-publish;
            on_play http://localhost:3000/api/v1/streaming/on-play;
            on_record_done http://localhost:3000/api/v1/streaming/on-record-done;
            on_done http://localhost:3000/api/v1/streaming/on-done;
            
            # Authentication for publishing
            on_publish http://localhost:3000/api/v1/streaming/auth-publish;
            
            # Multi-bitrate streaming
            exec_push ffmpeg -i rtmp://localhost:1935/live/$name
                -c:v libx264 -preset veryfast -tune zerolatency -c:a aac -ar 44100 -f flv rtmp://localhost:1935/hls/$name_720p
                -c:v libx264 -preset veryfast -tune zerolatency -c:a aac -ar 44100 -s 640x360 -f flv rtmp://localhost:1935/hls/$name_480p
                -c:v libx264 -preset veryfast -tune zerolatency -c:a aac -ar 44100 -s 426x240 -f flv rtmp://localhost:1935/hls/$name_240p;
        }
        
        # Application for HLS output
        application hls {
            live on;
            hls on;
            hls_path /var/www/html/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            
            # Allow playing from any IP
            allow play all;
        }
    }
}

# HTTP Configuration
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # CORS headers
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
    
    # HLS server
    server {
        listen 8080;
        server_name localhost;
        
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /var/www/html;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }
        
        location /dash {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            root /var/www/html;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }
        
        location /recordings {
            alias /var/www/html/recordings;
            add_header Access-Control-Allow-Origin *;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Main web server
    server {
        listen 80;
        server_name localhost;
        
        # Serve static files
        location / {
            root /var/www/html;
            index index.html;
        }
        
        # API proxy to backend
        location /api/ {
            proxy_pass http://localhost:3000/api/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
        
        # WebSocket proxy
        location /socket.io/ {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
